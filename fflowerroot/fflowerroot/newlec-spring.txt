-------스프링 프레임워크 강의 1강 - Spring 소개와 학습 안내-------
SPRING FRAMEWORK provides core support for 
1. dependency injection, 
2. transaction management, webapps, data access, messaging and more.


@@자바에디션들

@@jdbc 라이브러리 이용해서 db연동?


스프링은 라이브러리를 이용해서 깔끔한처리.
디팬던시인젝션을 이용해서 모듈 결합을 쉽게 해줌.
> 이런 매력의 이유로 자바 엔터프라이즈 에디션을 잠식해나가기 시작.

java ee           spring              java ee / spring
--------   >> ---------        or ------------------
java se           java se                 java se



* mvc model2를 먼저 만들어봐야 스프링라이브러리가 편한줄 안다.


* 웹개발에 필요한 3가지
    1. mvc	(DI)  (느슨한 결합력과 인터페이스)            2. 트랜잭션     (AOP)            3. 인증과 권한 (Servlet Filter) 
                                       


*스프링 들어가기전 예습사항 : 자바/ db(sql등) /mvc








--------스프링 프레임워크 강의 2강 - 느슨한 결합력과 인터페이스--------

ui>>> service >>> dao >> db

*코드 수정을 없애고 di를 위한 설정.

*
private B1 b= new B1();
b.getData();
↓
private B2 b= new B2();
b.getData(); 

[B라는 인터페이스 이용] 
 >하지만 B에 객체를 B2로 바꿔주려면 코드수정을 해야하는데,  코드수정없이 하기위해
    이 코드를 들어내고 외부설정을 통해서 객체를 바꿔주려고함.    //이거 자바에서 가능하다는데? service.setB(b) ?
private B b= new B1();
b.getData();
↓
private B b= new B2();
b.getData();

결론은 인터페이스를 이용해서 자료를 쓰면 객체의 이름를 숨길 수 있음.
스프링은 이렇게 결합할 때 필요한 설정파일제공, 객체를 결합해줌.


 




-------- 자바 객체지향 강의 33강 - 새로운 객체로 바꾸기(문자열을 읽어서 객체로 만들기) --------


* 설정을 통해서 결합부품 변경
xml : 외부설정파일  or 어노테이션(컴파일 해도 남는 주석) 사용

*문자를 객체로 만들기
Class.forName("") 클래스정보를 읽어오는.. 클래스 구조체?
String.class
객체명.getClass();

객체명.class.get~;


*인스턴스 생성방법 2가지
new A();
A.class.newInstance();



-------- 스프링 프레임워크 강의 3강 - DI(Dependency Injection) -------- 
1. DI(Dependency Injection)
2. IoC Container 


Composition has a (일체형) //생성자 사용해서 필드 b 값 넣어줌.
class A{
  private b b;
  public A(){ b= new B();  } }

Association has s (조립형/결합형)   //set메서드사용해서 필드 b값 넣어줌.
class A{
   private B b;
   public A(){  }
   public void setB(B b){ this.b=b;}}
	
조립형은 부품을 쉽게 변경할 수 있음.   
?그런데 두 경우 모두 인젝션/조립 ..이라고 함.   (인젝션 :종속성 주입)
> Counstruction Injection / Setter Injection






--------  스프링 프레임워크 강의 4강 - IoC(Inversion Of Control) 컨테이너 -------- 
스프링은 주문서대로 조립함.

*IoC Container
주문서에 입력된 내용대로 객체를 생성해서 담는 그릇이 필요함.

*일체형과 결합형은 객체생성 순서가 반대임.
A생성  >   A가 B를 만듬  > B가 C를 만듬
C  >  C가 만들어져서 B과 결합  >  B가 만들어져서 A와 결합

*IoC Container(Inversioin of Control) Container는 역순으로 부품이 담기는 컨테이너.







--------   스프링 프레임워크 강의 5강 - Dependency를 직접 Injection하기 --------  



-------- 스프링 프레임워크 강의 12강 - 어노테이션을 이용할 때의 장점과 @Autowired를 이용한 DI 해보기-------- 
*자바를 이용해서 어플리케이션을 만들 때, 어플리케이션의 초기화설정할 때 2가지 방법.1.어노테이션.2.xml
* 어노테이션 이용 장점 
*어노테이션 종류
Annotation
@Service
@Repository
@Component
@Autowired
@Transactional
@Scope

Spring MVC Annotations
@Controller
@RequestMapping
@PathVariable
@ModelAttribute
@SessionAttributes

Spring Security Annotations
@PreAuthorize

-
@Autowired
@Resource
@PostConstruct?
@PreDestroy
@Qualifier
@Required
@Bean
@Component
@Service
@Repository


* 인터페이스B를 구현한 객체B2와 그것을 사용하는 객체S
-소스코드를 수정하지 않고 이들의 결합상태를 변경하기위해서 설정파일을 만듬.
-B2를 B3로 변경하려면 설정을 변경.
-그런데 이제 이 설정변경도 불편함
-그래서 객체를 변경할 때 설정도 자동으로 변경되도록.
-그래서 코드에 설정을 심는(메타데이터를 심는)방법 개발됨.
-B2클래스와 B3클래스에 @Component붙임
-B2를 B3로 바꾸면 자동 설정변경됨.
-그런데 xml의 장점도 있음. 
-xml은 설정이 분리되어있는 것이고 어노테이션은 합쳐져있는 것임.
-주입은 다 어노테이션으로?


*
<bean id="exam" class="spring.di.entity.NewlecExam" p:kor="10 p:eng="10"/>
<bean id="console" class="spring.di.ui.InlineExamconsole">
	<property name="exam ref="exam"/>
</bean>
exam객체를 console에 주입함. 프로퍼티로?

@Autowired
private Exam exam;
이렇게 오토와이어드를 붙여주면 설정에서 <property name="exam ref="exam"/>를 지울 수 있음.

*@Autowired가 있으면 객체를 만들어달라고 지시
- namespace에서 context체크해줌. 그러면 xmlns:context="" 생김
-<context:annotation-config/>라고 써줌.
 >context.xml파일에 있음.
-@Autowired는 무엇을 근거로 연결해줌?
-

 @Conponent annotation이 붙은 클래스로 스프링 Bean 만듦 < 이게 무슨말?

컨피그했으니까 객체들의 어노테이션을 찾아보세요라고 하는 것이라고?
>그러면 객체를 만들면서 설정이 빠져 있는 것을 찾는다고?






@Context
: 스프링이 시작될 때 만들어지는 스프링이 사용하는 메모리영역
@ApplicationContext
:스프링의 Context객체 즉 메모리영역 

@root-context.xml
스프링이 객체를 생성하고 관리해야 하는 객체들에 대한 설정파일
@context:component-scan base-package="스캔할패키지명"
- 해당 패키지에 있는 클래스들 중에서 @Component가 있는 클래스의 인스턴스를 생성.
@Autowired
객체주입?





























































































































