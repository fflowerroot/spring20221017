--------- 자바 객체지향 강의 1강 - 객체지향 프로그래밍의 시작 캡슐화 -------

*구조적 프로그래밍?
*함수의 개체수가 많아지는 문제와 수납 방법의 모색
  어떻게 수납할것인가?
  기능에 따라서 분리할 것인가? (수납공간은 (클래스)파일)
   결론은 기능보다 데이터에 따라서 분리한다. 
	>구조화된 데이터를 사용하는 함수 모듈의 독립성을 침해하는 문제를 해결할 수 있기 때문에.
	>함수는 외부의 수정에 절대 영향을 받아서는 안된다. 
	  (그래서 우리가 매개변수를 이용해서 모든 변수를 지역화 시키는 것임)
 		- 그런데 매개변수로 구조화된데이터(객체?)를 받게되면 객체의 변수(필드)가 변경될 때 
                         함수 내에서 그것을 사용했다면 변경에 따른 영향을 받게됨. > 그러면 오류발생.
		     >>해결법 : 객체의 필드를 사용하고 있는 함수를 한 곳에 모음
			         이것이 캡슐화. (데이터와 함수가 모인 한 덩어리가 캡슐)	
				캡슐화를하면 데이터구조에 따른 코드의 수정범위를 캡슐범위로 한정 가능!




--------- 자바 객체지향 강의 2강 - 함수들을 캡슐화하기 -------



------- 자바 객체지향 강의 3강 - 인스턴스(Instance) 메소드 -------
list=new ExamList();
ExamList.inpuList(list)'
↓
list=new ExamList();
list.inputList();
 > list야 입력해   /list가 주체가됨.




























