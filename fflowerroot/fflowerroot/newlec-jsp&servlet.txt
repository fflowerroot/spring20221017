*Servlet의 어원?
> 아마도 server application let(조각)이 아닐까래.

*톰캣은 WAS이지만 W/S의 역활도 추가되었대.
W/S는 웹문서를 제공해주는 역할을 함.
톰캣서버 실행하면 W/S도 실행됨.


*문서를 톰캣을 통해서 서비스 받아보기.
>브라우저를 통해서 홈디렉토리에 있는 문서 요청하기.
>http://localhost:8080/nana.txt
 (http://자신의 컴 아이피:8080/nana.txt)
음, 같은 공유기를 써야 아이피에 접속 가능..하대..> 만약 접속이 안되면 방화벽 때문일 것임.
cf)공인아이피 vs 공유기를 통한 사설아이피 
> 공인아이피이면 전세계 어디서든 접속가능!
>홈디렉토리에 문서를 만들고 
>브라우저에서 'localhost:8080/문서이름.확장자'로 요청을보내면 문서를 볼 수 있음



*톰캣이 갖고 있는 디렉토리 중에서 문서를 보관하고 있는 디렉토리를 '홈디렉토리'라고 함. 
>홈디렉토리는 톰캣폴더의 webapps폴더의 ROOT폴더 안쪽이다. 

*localhost:8080/index.jsp와 localhost:8080 는 같은 요청이다. localhost:8080만 입력해도 index.jsp파일을 요청한 것과 같은 이유는 그것이 기본 문서이기 때문이다.

















---------<서블릿/JSP 강의 06 - 톰캣 9 설치하기 #3 of 3 - Context 사이트 추가하기>---------

*사이트를 만들다보면 규모도 커지고 파일도 많아지고 그렇게되면 디렉토리가 많아짐.

*사이트에서 링크를 클릭할 때마다 다른 것들이 보여짐.
>각각 디렉토리를 나누었을것이다.
>디렉토리를 나누어도 같은 ROOT폴더 안쪽에 있기 때문에 따로 나누어서 작업하기가 어려움. 그래서 아얘 폴더를 분리시켜서 다른 사이트인 것처럼 작업하고, 그것을 가상 디렉토리와 연결시킴. (그러니까 어느 곳에 있는 폴더라도 가상디렉토리로 연결시키면 같은 사이트인것 처럼 작동하게 할 수 있음. 단 서비스 문맥(?)은 유지해야하는듯?)
>서비스 문맥은 유지하되, 각각을 분류해서 별개 사이트 인 것처럼 만듬. > 물리적으로는 여러개의 사이트지만, 한사이트의 디렉토리인 것처럼 사용됨.  그것이 cntext사이트임. 가상경로라는 용어를 쓰기도함.


*context 사이트 설정하기
>홈디렉토리의 폴더를 다른 곳으로 이동시켜서 작업.
>톰캣폴더>conf>server.xml에서 두개를 연결하는 설정을 해줌.
>server.xml파일을 열어서 편집 > Host 안쪽에 Context를 넣음. 
 <Host name="localhost" appBase="webapps" 
          unpackWARs="true" autoDeploy="ture">
      <Context path="it"
       docBase="D:\tools\apache-tomcat-9.0.19\webapps\ITWeb"
       privileged="true"/>
-> Context path의 설정을 it로 함으로써 홈디렉토리에 가상의 it폴더를 만들고 그 it폴더의 경로를 docBase에 설정한 것임.	
-> 그런데 사실 이 방법은 지금은 지양되고 있음. 왜냐하면 server.xml파일을 수정하면 서버를 재시작해야하는데, 서비스 중인 경우에 서버를 재시작하면 치명적이기 때문이다.
->그래서 각 어플리케이션마다 meta info가 있는데 거기서 설정할 수 있음. 그런데 host를 하나만 만들 경우에는 server.xml파일을 수정해도 된대(응?)













---------<서블릿/JSP 강의 07 - 처음으로 서블릿 프로그램 만들어보기>---------

*Servlet을 만든다는 것은?
(서블릿은 서블릿인터페이스/추상클래스를 상속받은 모든 클래스를 말함. 혹은 인터페이스 그 자체. 여기서는 상속받은 클래스를 만든다는 것이다. )
서버어플리케이션을 만드는 것.
서버어플리케이션은 기능별로 코드가 나눠져 있음.
>많은 기능 중 요청이 들어온 기능만 사용됨.
  ex)  GET:/notice/list
       GET:/notice/reg
       GET:/notice/edit
       GET:/notice/del
>웹이라는 환경에서 사용되는 서버프로그램이기때문에(?) 필요한 기능만 로드되도록 조각 내놓음.
>필요한 기능을 하나씩 개발
>자바는 main()를 시작으로 프로그램을 만들고, was는(?) service()메서드를 통해서! 프로그램을 만듬.
>자바콘솔어플리케이션(?)과 유사한데, 웹입력과 웹출력 부분이 추가됨
>우리가 만든 모든 서블릿클래스들은 was에 의해서 로드가되고 실행됨.
>was가 관심 있는 것은 자손클래스명이나 구현클래스명이 아닌(?)  추상클래스명이나 인터페이스명.
>인터페이스(혹은 추상클래스)에 의해서 정해진 service() 함수가 실행됨.
>service()는 약속된 매개변수에 의해서 실행됨.  
  service()를 자바의 메인함수라고 생각하면 된대.
  ex) public class Nana extends HttpServlet{
	public void   service(HttpServletRequest request, HttpServletResponse response) throws IOExeption, ServletException{ } }  
  ->서블릿을 상속받은 모든 구현체를 서블릿(서블릿클래스)라고 하고, 위의 예는 Nana서블릿이라고 함.		
*메모장과 jdk와 tomcat만을 사용해서 (이클립스 x) 서블릿 실행해보기
>메모장에 아래처럼 코드를 입력 후 Nana.java라는 이름으로 저장.
	import javax.servlet.*;
	import javax.servlet.http.*;
	import java.io.*;
	public class Nana extends HttpServlet{
	public void   service(HttpServletRequest request, HttpServletResponse response) throws IOExeption, ServletException{ System.out.println("Hello Servlet!"} } ; 
>콘솔창(cmd)을 열고 파일이 있는 경로로 이동 후 dir로 목록 확인
>파일 이름 확인 후 javac Nana.java 를 입력하여 '컴파일'을 하면 error:cannot find symbol 오류가 남 
	->'서블릿라이브러리'는 jdk에 포함되지 않은 라이브러리이므로 오류가 난 것.
	->classpath<path>로 라이브러리가 있는 경로를 알려줘야, 소스코드를 컴파일 할 때 '서블릿라이브러리'를 찾을 수 있음.
	->서블릿라이브러리는 어디 있나 -> 톰캣폴더>lib폴더>servlet-api.jar파일 있음.
	-> cmd에 아래처럼 classpath에 api경로 입력해준다. 
		ex)D:\jsp>javac -classpath D:\tools\apache-tomcat-9.0.19\lib\servlet-api.jar Nana.java	
	cf)-classpath,- class-path, -cp 모두 사용 가능
	->입력 후 dir입력해서 디렉토리 목록을 보면 컴파일이 된 Nana.class파일을 볼 수 있다.




cf)<Difference between an application server and a servlet container?>

A servlet-container supports only the servlet API (including JSP, JSTL).

An application server supports the whole JavaEE - EJB, JMS, CDI, JTA, the servlet API (including JSP, JSTL), etc.
 
It is possible to run most of the JavaEE technologies on a servlet-container, but you have to install a standalone implementation of the particular technology.

 서블릿 컨테이너는 오직 서블릿 API 만 지원하는 것을 말한다 (JSP, JSTL 까지 포함해서)
애플리케이션 서버는 Java EE (EJB, JMS, CDI, JTA, 서블릿 API) 의 전체를 지원한다.
JBoss 같은 애플리케이션 서버는 웹 컨테이너보다 더 많은 기술들을 다룰 수 있다.
 
톰캣이나 제티 같은 서버를 서블릿 컨테이너라고 부르는 것은 약간 제한적이다. 왜냐하면 톰캣은 서블릿 뿐만 아니라 JSP 같은 것도 실행할 수 있기 때문이다.
출처: https://pjh3749.tistory.com/267 [JayTech의 기술 블로그:티스토리] (/cf)










---------<서블릿/JSP 강의 08 - 서블릿 객체 생성과 실행 방법>---------


우리가 만든 문서가 서블릿클래스?
만든 문서를 사용자가 어떻게 호출하게하고, 실행되게할까?

*우리가 만든 Nana.java 파일을 컴파일한 Nana.class파일.
> 이 클래스파일을 어디다 둬야할까? 
> ROOT안의 WEB-INF폴더 안에 classes라는 폴더를 만들고 그 안에 둔다.(만약 클래스파일이 패키지 안에 들어 있었다면, 패키지와 같은 이름의 폴더를 만들고 그 안에 클래스 파일을 둔다.)
-> 이게 약속된 규칙이라는데? 이 규칙대로 하지 않으면 클래스 파일을 찾을 수 없다고?
>클래스 파일을 요청하려면?-> 이 디렉토리 경로를 url로 요청하면(ex)http://www.newlecture.com/WEB-INF/classes/Nana.class) 파일을 찾을 수 없다고 나온다.
-> 그 이유는, tomcat이 운영하는 홈디렉토리(ROOT폴더 내)의 WEB-INF폴더는 사용자에 의해서 요청될 수 없다. 폴더 내의 자원들은 서버쪽(w/s와 was)에서만 사용 가능!(비공개영역)
->그렇다면 요청방법은? -> 사용자가 요청하는 이름과 클래스파일 이름을 mapping하는 작업 필요. 
-> url과 mappping된 Servlet코드를 찾아서 실행.
> mapping정보를 tomcat에 설정. web.xml파일에서 설정가능.	
     <servlet>
	<servlet-name>na</servlet-name>
	<servlet-class>Nana</servlet-class>
     </servlet>
	
     <servlet-mapping>
	<servlet-name>na</servlet-name>
	<url-pattern>/Na<</url-pattern>
     <servlet-mapping>
->이렇게 설정했으면 이제 http://localhost/Na로 Nana클래스 파일을 요청할 수 있다.
( Na로 요청하면 tomcat이 그에 해당하는 servlet클래스를 찾아서 실행시켜준다.)
cf) servlet 조각들?을 모아놓은 곳이 WEB-INF폴더 안쪽에 우리가 만든 classes 폴더? 
	->우리가 만든 클래스파일들이 servlet클래스파일, 즉  servlet조각 이라는 것 같음.		

cf) tomcat폴더>bin폴더>startup.bat파일로 tomcat을 실행시고, 그 다음에 브라우저를 실행시켜서 url로 요청.










--------<서블릿/JSP 강의 09 - 서블릿(Servlet) 문자열 출력///이제 콘솔이 아닌 웹에서 출력!>-------

8강에서는 서버쪽 콘솔에 출력하는 방법을 배웠음.

서블릿을 만드는 것은 자바를 이용해서 웹프로그래밍을 하는것인데
웹이 담당하는 것은 UI(사용자-컴퓨터 의사소통 매개 > 입출력)다.
UI는 콘솔UI 윈도우UI 등등이 있음.
결국 입/출력을 담당하는 부분이 웹으로 바뀌는 것임.
입/출력을 이해하는 것이 웹 프로그래밍에서 가장 중요하대.

cf) User Interface(사용자 인터페이스)
일반적으로, 작은 도구들의 사용에 대한 것부터 큰 기계시스템의 제어와 처리를 하는 것까지 다양한 개념들을 포괄한다.
사용자 인터페이스는 사람(사용자)과 컴퓨터시스템 사이의 '의사소통 매개'를 의미한다. 이 의사소통은 해당 기기에 대해 효율적인 작동과 사용자의 제어를 보장하는 것을 목표로 한다. 주변의 터치스크린, 마우스 등은 UI를 물리적으로 볼 수 있는 좋은 예시이다. (/cf)


 *HttpServletRequest는 입력도구
  HttpServletResponse는 출력도구임

*HttpServletResponse가 가지고 있는 도구들로 사용자에게 출력을 어떻게 할 것인가?
HttpServletResponse인 reponse객체 의 get@@()메서드를 보면 여러가지가 있다.
response.get@@();
입/출력을 할 때는 스트림을 쓰는 것이 기본적이다. ->파일입출력,네트워크입출력..
우리가 출력해볼 것은 바이너리,바이트 등이 아니라 문자열이다.
그래서 response.getOutputStream();을 바로 쓰기보다, 
	OutputStream os= response.getOutputStream();
	PrintStream out = new PrintStream(os, true);
	이렇게 PrintStream의 out객체를 만들어서 쓴다.
PrintStream은 문자 하나를 바로 전송하지 않고 버퍼를 쌓아서 전송함.
운영체제가 윈도우인 경우에는 출력버퍼가 8kbite정도임. 
만약 버퍼가 채워지지 않으면 출력되지 않을 수 있음. 그럴 때는 flush를 true로 해주면 바로 전송됨.

out.println("hello"); < 원격의 사용자에 출력
> 위 처럼 소스코드 수정 후엔> 재컴파일>재배포(컴파일된 클래스 파일을 톰캣에서 실행시킬 디렉토리에 넣음)>서버재실행>사용자(웹브라우저)가 요청
	-> 이 복잡한 과정을 이클립스를 이용하면 쉽게 할 수 있음(실행버튼으로 위 과정이 다 실행됨)

 
*자바에서는 Stream계열과 Writer계열이 있다(?). 영어가 아닌 문자를 쓸 때는 Writer를 사용한다. Writer를 이용해서 PrintStream을 사용.
PrintWriter out = response.getWriter();
out.println("hi");















---------<서블릿/JSP 강의 10 - 웹 개발을 위한 이클립스 IDE 준비하기>---------

일반적으로 자바로 웹개발을 할 때는 이클스enterprise edition을 사용함.
	->Eclipse IDE for java EE Developers를 다운받아서 사용/ 다른버전을 다운받았다면 플러그인 추가.

이클립스의 도움을 받으려면 이클립스에 정보를 알려줘야함.(일단 프로젝트를 생성하고 사용할 was정보를 알려주자)
>file>new>Dynamic Web Project
>Target runtime에서 was 선택/ 우리는 톰캣. 톰캣버전, 톰캣경로



cf)이클립스에서 처음 프로젝트 생성 후 xml파일을 수정하지 않았는데도 오류가 생기는 경우가 있는데, http프로토콜을 현재 많이 쓰이는 https로 바꾸면 사라짐.











---------<서블릿/JSP 강의 11 - 이클립스를 이용한 서블릿 프로그래밍>---------
 
문서를 실행하면 -> 이클립스가 이 문서가 톰캣의 디렉토리로 옮김. -> 톰캣이 실행 -> 브라우저를 띄워서 이 문서를 요청함.(톰캣 실행중에는 8080포트를 사용하고 있기 때문에 실행중인 톰캣을 종료하고 실행해야함.)


*ROOT에 해당하는 기본프로젝트는 context path를 사용하는 것이 좋지 않대...
?? context path 여러개 설정 가능?


*프로젝트 오른쪽 클릭>속성>web project settings>Context root를 /로 변경하면 기본프로젝트(root)가 됨.->context 이름이 사라진 것임. 


*(WEB-INF폴더의?)문서를 실행하려면 mapping을 해야함. mapping은 WEB-INF폴더안의 web.xml파일에서 하는데 web.xml파일이 (이클립스의 WEB-INF 안에) 없다면 가져와서 폴더에 넣어준다.  (이클립스의 폴더에는 없는데 탐색기에서는 보이네..)
-> 이클립스에서 파일을 열고 Source탭을 누르면 편집 가능. 











---------<서블릿/JSP 강의 12 - 어노테이션을 이용한 URL 매핑(서블릿3.0이상)>---------

* @WebServlet("/contextPathName")
  public class Nana extends HttpServlet{ ..}

>어노테이션으로 매핑정보를 남기면 web.xml파일에서 매핑하지 않아도 된다!

cf)어노테이션은 컴파일을 해도 사라지지 않는 주석/메타데이터

*어노테이션을 이용해서 url매핑을 하기 위해서는, web.xml파일에서 루트엘리먼트에 해당하는 웹엡에서 metadata-complete을 "false"로 설정해야함. "true"이면 모든 설정을 web.xml에서 했다는 말이다.

*협업을 하는 경우 web.xml파일을 공유하거나 여러개로 나눠서 설정을 하기보다는 어노테이션을 이용해서 매핑설정을 하는 것이 좋대. 

==맞나? 이렇게 정리 해봤음==
* 매핑 > WEB-INF폴더는 외부접근 불가이므로 url패턴으로 매핑을 해줘야 그 패턴으로 외부에서 접근.
* context path > 내부디렉토리가 아닌 외부에서 작업 후 내부 디렉토리인 것처럼 경로를 설정해준다.
* context root > 홈디렉토리 경로의 이름을 새로 지어주는 것인데 이 이름은 짓지 않는 것이 좋대... 

>> 그런데 어쨌든 3case 모두 url이름을 설정해주는 것 아님?
=====================














--------<서블릿/JSP 강의 13 - 서블릿 출력 형식을 지정해야 하는 이유>--------

* 브라우저에 컨텐츠 형식을 알려주지 않으면 자의적으로 해석해서 출력형식을 정한다.
	ex)public class Nana extends HttpServlet{
		@Override
	  	protected void service(HttpServletRequest req, HttpServletResponse resp){
			PrintWriter out = resp.getWriter();
			for(int i=0; i<100; i++) 
				out.println("Hello!");
	             }
	     }
>웹문서로 인식했다면 내려쓰기 안되어야함.(html에서 <br>태그를 사용해야 내려쓰기가 되는 것처럼..)/ text로 인식했다면 내려쓰기 되어야함. 
> 인터넷익스플로어는 html로 해석하고 크롬은 text로 해석함.












--------<서블릿/JSP 강의 14 - 한글과 콘텐츠 형식 출력하기>--------

*한글이 깨지는 이유 두 가지

1.서버에서 한글을 지원하지 않는 문자코드로 인코딩한 경우
ISO-8859-1이라는 유럽에서 사용하는 인코딩 방식 - 웹서버에서 클라이언트로 문서를 보내는 단위가 1바이트임.

2.서버에서는 UTF-로 인코딩해서 보냈지만 브라우저가 다른 코드로 잘못 해석한 경우



* 출력형식 지정해주기
response.setCharacterEncoding("UTF-8");

* 응답해더(Response Header)에도 컨텐츠 읽을 방식 지정해주기
> 이것도 서버에서 지정(브라우저 자체 기능으로 인코딩 방식을 변경할 수 있는 경우도 있음 -ex)인터넷익스플로러)
   response.setContentType("text/html; charset=UTF-8");
   참고로 이렇게 문서형식을 html이라고 지정해주면 out으로 보낸 텍스트를 텍스트자체로 인식했던 크롬에서도 <br>을 태그로 인식하게 됨.
> 이렇게 설정하고 Response Headers정보를 보면 Content-Type에 text/html; charset=UTF-8이라고 적인걸 볼 수 있다.












--------<서블릿/JSP 강의 15 - GET 요청과 쿼리스트링>--------

* 사용자의 입력은 어떻게 처리할까?
> 사용자의 입력은 무엇인가를 요청하게된다
> 사용자가 요청하는 값을 어떻게 받을 것인가?
> 사용자의 요청은 get/post 방식이 있음
> 기본적으로 클라이언트가 요청하는 것은 문서임.
     ->문서를 요청할 때 추가적인 정보를 전달할수도 있음.(쿼리스트링). 왜냐하면 구체적인 요청사항이 있기 때문에!
>쿼리스트링을 서버에서 어떻게 활용할까?
    -> request.getParameter(사용자가 입력한 값의 이름)으로 입력값을 가져옴. 입력값을 가져오면 문자열이됨.
        getParameter함수로 입력값의 이름을 지정해주면 반드시 쿼리스트링에 입력해줘야함. 아니면 500에러가 남.

===========
response는 출력관련
request는 입력관련
===========


















--------<서블릿/JSP 강의 16 - 기본값 사용하기>--------

* 사용자 요청의 세부사항인 쿼리값을 읽으려면 getParameter메서드 사용.
* 쿼리값이 없거나 빈문자열이라서 생기는 오류를 처리해준다. (if문 등으로)
	>쿼리값 없을 때 기본값을 지정해주기.













--------<서블릿/JSP 강의 17 - 사용자 입력을 통한 GET 요청>--------














--------<서블릿/JSP 강의 18 - 입력할 내용이 많은 경우는 POST 요청>--------














--------<서블릿/JSP 강의 19 - 한글 입력 문제>--------
* 이전에 출력할 때 한글 문제는 해결했음
     >이번엔 전달과정에서 문제가 발생.

* utf-8로 입력받음. 
   (url 요청 받을때 2바이트단위로 받음.) 
   (utf-8은 멀티바이트문자임. 한글 입출력시 사용됨.)

    > 그런데 톰캣은 기본적으로 ISO-8859-1로 요청을 encoding함. 
       (ISO-8859-1은 1바이트씩 인코딩함)

	>서블릿에서 request.setCharacterEncoding("UTF-8");로 요청을 인코딩 하는 방식 설정해줘야함. 설정은 사용자요청을 가져오기 전(입력받기 전)에 해줘야함. (getParameter()코드 위쪽에 코드를 작성)
	    //또는 톰캣서버의 환경설정에서 인코딩방식을 utf-8로 바꿀 수도 있지만 톰캣서버 환경설정은 잘 건드리지 않는 것이 좋다.>왜냐하면 톰캣서버에는 여러개의 서비스(사이트)를 돌릴 수가 있으니까, 나의 사이트를 위해서 다른 사이트까지 영향을 주게되니까. 












--------<서블릿/JSP 강의 20 - 서블릿 필터(Servlet Filter)>--------

cf) Servlet은 서버쪽 어플리케이션

* W/S----WAS---(request/response)---ServletContainer

cf)서블릿을 실행하면 메모리상에 존재하게 되는데, 그 공간을 서블릿컨테이너라고함.
  was는 서블릿을 실행시켜서 컨테이너에 담아놓고 결과를돌려받게됨. 그리고 그 서블릿이 더이상 사용되지 않으면 컨테이너에서(를?) 삭제.


* 톰캣서버설정변경이 부담스러워서, 또는 그 밖의 이유로(?) 톰캣이 서블릿에 요청/응답을 하고,받을 때 '필터'를 사용한다. 
     [[W/S]]--------[[WAS]]-------(request/response)------{filter}------[[ServletContainer]]
	>필터는 서블릿을 실행할지 말지를 결정할 수 있음! 
	>서블릿 실행 후에도 필터를 거쳐서 나옴!
	>인증할 때 권한을 줄 것인지 여부 결정하는 등. 수문장 역할!

	cf) url요청없이, 서버만 재시작 하면 필터작동할 일 없음.



cf) 	cf) name의 값이 없으면(이름이 없으면) null ,  변수명은 있는데 value의 값이 없으면 빈문자열(""). 
                 null과 ""은 NunberformatException이 발생함!






---------<서블릿/JSP 강의 23 - 여러 개의 Submit 버튼 사용하기>--------

---------<서블릿/JSP 강의 24 - 입력 데이터 배열로 받기>--------
?  인풋으로 파라미터 전송하고 다시 그 인풋박스에 입력하게 하려면..?



--------<서블릿/JSP 강의 25 - 상태 유지를 필요로 하는 경우와 구현의 어려움>--------
웹서버프로그램은 어플리케이션이 조각나있다.
전역변수처럼 서블릿들 사이에서 값을 유지해야할 때가 있다.
 > 서블릿들간의 값을 공유하고 싶을 때. 
      즉 서블릿이 살아있을 때 생성한 값을 서블릿이 죽더라도 다른 곳에 저장해서 유지하고 싶을 때.(서블릿이 죽으면 갖고 있던 값은 소멸하므로)
* > application
  > session
  > cookie
  > hidden input
  > querystring 

--------<서블릿/JSP 강의 26 - Application 객체와 그것을 사용한 상태 값 저장>--------
*서블릿 Context ? 
 >서블릿들 간에 문맥을 이어갈 수 있도록 하는 저장소....?
 >어플리케이션 저장소 : 서블릿 Context     ..?



--------<서블릿/JSP 강의 27 - Session 객체로 상태 값 저장하기(그리고 Application 객체와의 차이점)>--------
*session : 현재 접속한 사용자마다 부여받는 공간.
cf)브라우저를 새창으로 열면 같은 세션일까? 응 
  > 왜냐하면 창을 여러번 열어도, 하나의 프로세스가 동작함. 
      하나의 프로세스가 하위흐름의 스레드를 여러개 동작시킴. 
       프로세스가 가지고 있는 자원을 스레드들이 공유함. 







--------<서블릿/JSP 강의 28 - WAS가 현재사용자(Session)을 구분하는 방식>--------
*웹서버는 사용자를 어떻게 구분할까? > 세션 >세션은 어떻게 구분할까?

* 브라우저를 이용해서 서버에 요청.
 >서버에는 요청을 처리하다가 다른 서블릿과 공유하고 싶은 것을 어플리케이션 공간에 저장, 또는 세션공간(개인 사물함)에 저장. 

*어플리케이션공간은 공용 vs 세션은 개인사물함.
* 값을 사물함에 두지 않고 사용자가 가지고 다닐 수 있는데 그것이 쿠키. /값을 꺼내서 사용할수도 있지만 가져온 값을 사용할 수도 있다는.(?)

*요청이 처음 왔을 때 새로운 사용자(세션)임.

*모든 요청을 어플리케이션공간에 값을 남길 수 있음. 그런데 세션은 사용자가 세션아이디를 가지고 있어야함. 처음에는 세션아이디가 없음. 즉  세션저장소 못 씀.(응?????)
(와스가 발부하는 세션아이디// 브라우저를 닫으면 세션종료.)

@@
첫 요청은 세션저장소를 못써?

void setAttribute(네임, 벨류)  : 지정된 이름으로 객체 설정
Object getAttribute(네임)	:  지정한 이름의 객체 반환
void invalidate()	:  세션에서 사용되는 객체들을 바로 해제
void setMaxInactiveInterval(int interval) :  세션 타임아웃을 정수(초)로 설정
boolean isNew()	:   세션이 새로 생성되었는지 확인
Long getCreationTime() : 세션이 시작된 시간(시각 아님?)을 반환, 1970년 1월 1일을 시작으로 하는 밀리초. 
long getLastAccessedTime()	: 마지막 요청 시간(시각?), 1970년 1월 1일을 시작으로 하는 밀리초.












--------서블릿/JSP 강의 29 - Cookie를 이용해 상태값 유지하기---------

*사용자가 서버에 요청할 때는 값을 가져갈 수 있는데,
값을 크게 3가지로 나누면 1. header정보, 2.사용자데이터, 3.쿠키.
(헤더정보 꺼낼 때는 겟헤더, 사용자데이터를 꺼낼 때는 겟파라미터, 쿠키를 꺼낼 때는 겟쿠키.)

*사용자한테 쿠키보낼때(사용자가 쿠키 가져갈 때)는 addCookie(cookie)메서드.

* 값을 유지하고 싶은데, 어플리케이션에도 세션에도 저장하기 싫다면 쿠키에!

* 값을 사용자한테 보내면 장점은?

*쿠키는 키와 값으로 나눠짐. / 쿠키는 브라우저(사용자)에게 전달하는 값.
  사용자는 리스폰스(응답)로 쿠키를 받음.
  사용자가 재요청을 할 때 그 쿠키를 들고 옴.
  쿠키는 배열. ?  반복문으로 키에 해당하는 값을 찾음.

*쿠키는 문자열로만 저장됨. 






-------- 서블릿/JSP 강의 30 - Cookie의 path 옵션--------
쿠키이름.setPath("/")  모든 페이지를 요청할때마다 쿠키를 전달하고..가져와라?
쿠키이름.setPath("/notice")  notice가 포함된 하위요청할때 쿠키를 전달하고..가져와라?


-------- 서블릿/JSP 강의 31 - Cookie의 maxAge 옵션 -------- 





--------  서블릿/JSP 강의 32 - Application/Session/Cookie 정리 -------- 
*application   /서버쪽 자원을 씀
   사용범위: 전역범위에서 사용하는 저장공간
   생명주기: was가 시작해서 종료할 때 까지
   저장위치: was서버의 메모리

*session /마찬가지로 서버 자원을 씀
   사용범위: 세션범위에서사용하는 저장공간
   생명주기: 세션이 시작해서 종료할 때 까지
   저장위치: was서버의 메모리

*cookie
   사용범위:웹브라우저별 지정한 path범주 공간(지정한 url에서만 사용가능)
   생명주기:브라우저에 전달한 시간부터 만료시간까지
   저장위치:웹브라우저의 메모리 또는 파일.


* 
-긴 기간 유지해야하는 값이 있다면?
>>세션은 1년처럼 긴 기간을 사용할 수 없음. 왜냐하면 세션은 그 공간을 차지해야하니까!(서버저장소를 1년가 차지하기엔 무리임). 긴 기간 유지해야하는 값은 쿠키에 저장해야함. 
-특정 url에서만 사용되는 값은?
>> 쿠키에 저장!. 왜냐하면 세션에 저장하면 역시 서버저장소가 무거워지니까. 특정 url에서만 사용되는 자원을 굳이 세션에 저장할 필요가 없음.
  








--------  서블릿/JSP 강의 33 - 서버에서 페이지 전환해주기(redirection)--------  
간단하지만 많이 사용하는 redirect
>요청받은 페이지가 자신을 응답으로 보내지 않고, 다른 페이지를 응답으로 보냄.
 >> 마치 사용자가 그 다른 페이지를 요청한 것 처럼!

response.sendRedirect("cal.html");







-------- 서블릿/JSP 강의 34 - 동적인 페이지(서버 페이지)의 필요성---------
html만으로는 동적페이지 작성 불가.





--------  서블릿/JSP 강의 35 - 처음이자 마지막으로 동적인 페이지를 서블릿으로 직접 만들기 -------- 
*service()메서드에 동적코드 작성할것임. > out.write()를 사용해야해서 굉장히 번거러움.
    >> 이것을 해결하기 위해서 등장한 것이 jsp?   > @@? html로는 안됨...??
*자바코드 중간에 html코드를 붙여넣기 한 다음 out.write()를 한줄 한줄 붙여줌.
*html에선 불가능했던 연산이 가능함!







--------   서블릿/JSP 강의 36 - 계산기 서블릿 완성하기 --------  

;; 쿠키 강의 제대로 안들어서.. 먼 소린지 모르겟다 ㅠ




@@ super.service() ? > (오버라이딩 안하면)겟요청과 포스트요청 들어오는대로 나눠주는함수? 이거 쓸 일 있어?








--------   서블릿/JSP 강의 40 - JSP 시작하기 (Jasper를 이용한 서블릿 프로그래밍)--------   
*jsp확장자를 사용하면 jasper가 html코드를 서블릿코드로 바꿔줌!
   >언제 서블릿코드로 바꿔줄까?  ->사용자가 jsp파일을 요청할 때!
   >url매핑은 jsp파일명 그대로!! (서블릿은 url매핑을 따로 해줘야했음!!)
   > 실제 만들어진 서블릿코드의 이름은 
         >>ex) add.jsp  --> add_jsp.java 파일로 만들어짐!
            (톰캣 설치 디렉토리 \work\Catalina\localhost\newlec\org\apache\jsp\add_jsp.java




--------  서블릿/JSP 강의 42 - JSP의 내장객체 간단히 알아보기 --------   
*jasper가 만들어낸 jsp파일?(서블릿?)에는 숨어있는 코드들이 있다!
  >jasper가 선언한 변수들이 있고, 매개변수로 들어오는 변수가 있음!(기본객체라고 부름)
*out객체체를 쓰는 것은 바람직하지 않다고 봄. 왜냐하면 el이 있으니까! 
*context는 문맥. servletContext는 서블릿들이 공통으로 사용할 수 있는?
  ServletContext는 application임..





-------- 서블릿/JSP 강의 43 - JSP로 만드는 Hello 서블릿 --------   



요즘에는 jsp의 단점때문에 jsp를 출력을 위한 템플릿페이지로써만 사용한다고함!







-------- 서블릿/JSP 강의 46 - JSP MVC model1을 model2 방식으로 -------- 

*모델2 
-컨트롤러와 뷰의 코드를 분리했다는 것이 가장 큰 특징.
-컨트롤러는 Dispatcher를 이용해 jsp(뷰페이지)로 포워드함
  >> 컨트롤러마다 dispatcher를 갖고 있는것이 비효율적이어서 , 실제 dispatcher는 하나만 만들고 업무로직은 POJO클래스들을 만들어서 dispatcher가 요청에 맞는 클래스을 찾음.

* -redirect는 새로운요청
  -forward는 현재 흐름을 이어감.

*서버상의 상태 저장소 4개 > pageContext , request, session, page ?. (cookie는 클라이언트 저장소) 

*jsp에 넘겨줄 때 어트리뷰트로 넘겨주는데 어트리뷰트는 리퀘스트객체의 일부(?)임..






-------- 서블릿/JSP 강의 47 - EL(Expression Language)-------- 
*모델2 - 컨트롤러에서 가공해서 리퀘스트(의 어트리뷰트)로 넘겨주면 뷰(jsp)에서도 자바코드가 사용되게되는데 자바코드를 자바코드로 꺼내지 않고 el로 꺼내면 자바코드를 뷰페이지에서 완전히 걷어낼 수 있게 됨. (el이 생겨난 이유.)
<%=request.getAttribute("어트리뷰트이름")%>
  -> ${어트리뷰트이름}

@@? 아.. 어트리뷰트이름을 새로 설정하게 했어야만 했나? 자바의 변수를 그대로 가져다가 쓸 수는 없었던건가?(음.. 그 조립 문제 때문인가??)














========================================

@@ 
-from action
-forward
-redirect


@@
//사용자에게 받는 요청은 url이고 상세내용은 쿼리부분인듯?
//쿼리는 다 get방식 요청인거야?
//post요청을 받을 수 있는 방법은 action태그 뿐?
// get방식 post방식이 요청에만 해당하는거야? 응답은..보낸 요청의 방식을 따라가는 ..? 





@@
javax?


@@
out.print();    > 소켓에서 꺼낸 아웃풋 스트림이고, 문자단위로 쓰는 프린트 (?)

out.print()랑 out.write() 차이??




@@
Preferences / Properties

Properties for newlec? > Java Build Path ? 

Source / Project / Libraries / Order and Export / Module Dependencies

Modulepath / Classpath




@@ java에 filed(멤버변수)가 있듯이 html에는 attribute가?!! 



@@
jsp(jsp는 자바파일이고,  _jspService()를 가지고 있음.) 
 > _jspService()의 매개변수로 들어오는 객체들 은 2개 + 지역변수로 선언된 객체 나머지!  // exception도 매개변수로 들어와서 사용가능 한건가?

 public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {
	 ....
          final javax.servlet.jsp.PageContext pageContext;
          javax.servlet.http.HttpSession session = null;
          final javax.servlet.ServletContext application;
          final javax.servlet.ServletConfig config;
          javax.servlet.jsp.JspWriter out = null;
          final java.lang.Object page = this;
          javax.servlet.jsp.JspWriter _jspx_out = null;
          javax.servlet.jsp.PageContext _jspx_page_context = null;
	.... }

    *내장객체 정리
    >>  javax.servlet.http.HttpServletRequest request
    >>  javax.servlet.http.HttpServletResponse response
    >>  javax.servlet.jsp.PageContext pageContext
    >>  javax.servlet.http.HttpSession session
    >>  javax.servlet.ServletContext application
    >>  javax.servlet.jsp.JspWriter out
    >>  javax.servlet.ServletConfig config
    >>  java.lang.Object page
    >>  java.lang.Throwable exception    
 



@@이클립스에서 만든 jsp   //  jsp는 서블릿이라고? >응
public final class NewFile_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


@@ jsp 상속구조

java.lang.Object
  |
  +--javax.servlet.GenericServlet
        |
        +--javax.servlet.http.HttpServlet
              |
              +--org.apache.jasper.runtime.HttpJspBase
All Implemented Interfaces:
javax.servlet.jsp.HttpJspPage, javax.servlet.jsp.JspPage, java.io.Serializable, javax.servlet.Servlet, javax.servlet.ServletConfig
public abstract class HttpJspBase
extends javax.servlet.http.HttpServlet
implements javax.servlet.jsp.HttpJspPage
This is the subclass of all JSP-generated servlets.



@@ 이클립스에서 만든 서블릿
/**
 * Servlet implementation class MyServlet
 */
@WebServlet("/MyServlet")
public class MyServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;






@@api에서 필드는 없어????? ...  그리고 왜 jsp클래스 소스코드에서 내장객체가 보이질 않아? 필드 선언이 안되어있는데 어떻게 이용을 하지?? ...
>> 헉.. 필드로 선언된게 아니라, _jspService()메서드의 파라미터로 받아서 사용하는거 였음 ㅠㅠ.....
>> 헉 그래서.. 필드가 아니라서 안보인 거겠지? ㅠ...


@@사용자는 request객체에 요청을 담아서 보냄.
 >그것을 get~()메서드를 이용해 정보(값)를 얻어서 사용함.
 >우리가 자주 사용하는 정보는 request의 parameter임




@@ 서버재시작하는 이유가?
> 서버코드가 바뀌었을 때라는데..?

@@"null"이랑 ""은 항상 같은 참조값을 갖나?


@@ context path
? 톰캣에 여러 어플리케이션을 올리려면 context path를 잘 써야한다고??? 하나만 올릴거면 root만 올릴거면 상관 없다고?? ;;
>context path는 모듈(어플리케이션/프로젝트)의 경로..잖아?  / root랑 무슨상관?


@@Servlet을 url 매핑 안하고 절대경로로 요청하려면..?



@@
서블릿이 익숙하지 않은 경우 파일 경로에 대한 고민을 분명히 할 것이다. 필수적인 위치명 두가지 Context path와 Context root 에 대해 설명.
Context Path : 프로젝트 명을 의미하며 url의 호스트, 포트명 다음에 나온다. 
Context root : Content directory의 경로. 해당 경로에 메타 정보와 웹 정보를 관리하는 META-INF와 WEB-INF 파일이 자동생성되며 JSP파일은 여기 하위에 저장되어야 경로를 찾을 수 있다.  ?



@@
페이지 모듈화(코드재사용) 방법 4가지
1. <%@ include file="navbar.jsp"%>  :코드 복붙 효과
2. <jsp:include>
3. jstl c:out
4. tag


@@
response.sendredirect("@");  > 응답으로 "@"페이지로 요청을 함
>form에 action도 같은 일을 하는거.. 같음(?)

@@
forward
<jsp: action/>태그
==============================================



















-------- 서블릿/JSP 강의 48 - EL의 데이터 저장소-------- 
*
1.app
2.session
3.request
4.page
@@?? page는 그 url에서만 쓸 수 있는? 그럼 어트리뷰트할당도 jsp에서 해야함???


*el의 저장소
 -pageScope
 -requestScope
 -sessionScope
 -applicationScope
>el은 4대 저장소 외에 쓸 수 있는 저장소가 있다!
 -param
 -paramValues
 -header
 -headerValues
 -cookie
 -initParam
 -pageContext

*el에서는 함수호출방식 사용불가. 모두 속성을 쓰는 방식으로 써야함.
>ex) <%=pageContext.getRequest().getMethod()%>
        -> ${pageContext.request.method}
 











-------- 서블릿/JSP 강의 52 - JDBC를 이용해 글 목록 구현하기-------- 
*jdbc driver? 
 > 자바(?)에서는 프로젝트의 properties에서 Java Build Path에서 jar 파일 설치했음. (이건 라이브러리의 경로를 알려주는 것임)
*jsp에 jdbc driver설치?
 >하지만 웹개발은 프로젝트에서(?)컴파일되고 실행되는 것이 아니라 톰캣에 배포되고 톰캣에 의해서 실행됨. 그래서 build patg가 달라짐. 서버를 옮겼을 때 jar파일의 위치를 알 수 없게됨(?). 웹개발은 어딘가에 배포된 후 실행되므로 라이브러리를 같이 가져가야함. 그래서 경로만 알려주는 것이 아니라 라이브러리를 프로젝트에 포함시킴. > lib파일에 라이브러리를 담아줌. (단 실행환경의(?) 라이브러리는 담을 필요없음)








-------- 서블릿/JSP 강의 55 - MVC model2 방식으로 변경하기-------- 
모델1에서는 코드분리를 지협적(?)으로 했음. > 분리는 했지만, 같은 _서비스()메서드에 모든 코드가 들어가 있는 상태.
모델2에서는 아예 다른 파일로 코드를 분리함.

*모델1에서는 지역변수를 표현식을 써서 바로 출력가능.
 모델2에서는 변수를 jsp(view파일)로 가져와야함. >그 변수를 모델(bean)이라고 표현
  >@pageContext는 모델2에서 쓸 수 없다고?

@request는 입력도구이자 저장소.



@@ 자바를 이용해서 웹개발을 할 때 필요g한 api : 서블릿과 jsp 



@@@ ???????? jsp파일이 변환된 .java파일 어디있어? ... 경로가 다 다를 수 있나?
   >> C:\Users\tjtjd
\eclipse-workspace    // 이클립스 워크스페이스..?
\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work\Catalina\localhost\newlec\org\apache\jsp
cf)자바파일은 실행시 톰캣에의해 만들어지니까 실행을 시켜야 파일이 생김.
@? 그런데 자바파일 봤는데 확장자가 왜 jsp지? 코드는 자바..


@@ eclipse-workspace    // 이클립스 워크스페이스..가 뭐지?






















